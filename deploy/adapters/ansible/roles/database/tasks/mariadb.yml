---
#- name: delete default maridb-libs
#  action: "{{ ansible_pkg_mgr }} name=mariadb-libs state=absent"
#  when: ansible_os_family == "RedHat"
#  ignore_errors: True

- name: install python-mysqldb
  action: "{{ ansible_pkg_mgr }} name={{ item }} state=present"
  with_items: maridb_packages | union(packages_noarch)

- name: create mysql log directy
  file: path=/var/log/mysql state=directory owner=mysql group=mysql mode=0755

- name: update mariadb config file
  template: src={{ item }} dest={{ mysql_config_file_path }}/{{ item }} backup=yes
  with_items: mysql_config_file_name

- name: update galera wsrep.cnf
  template: src=wsrep.cnf dest={{ wsrep_config_file_path }}/wsrep.cnf backup=yes

- name: update wsrep_sst_rsync uid
  lineinfile: dest=/usr/bin/wsrep_sst_rsync state=absent regexp="\s*uid = \$MYUID$"  backup=yes

- name: update wsrep_sst_rsync gid
  lineinfile: dest=/usr/bin/wsrep_sst_rsync state=absent regexp="\s*gid = \$MYGID$"  backup=yes

- name: restart first mysql server
  shell: service mysql restart --wsrep-cluster-address="gcomm://"
  when: inventory_hostname == haproxy_hosts.keys()[0]
  register: result
  until: result|success
  retries: 5
  delay: 5
  tags:
    - mysql_restart

- name: restart other mysql server
  service: name=mysql state=restarted enabled=yes
  when: inventory_hostname != haproxy_hosts.keys()[0]
  register: result
  until: result|success
  retries: 5
  delay: 5
  tags:
    - mysql_restart

- name: generate mysql service list
  shell: echo {{ item }} >> /opt/service
  with_items: services_noarch

- name: create database/user
  shell: /opt/data.sh
  run_once: True
  tags:
    - mysql_user
